#!/usr/bin/env ruby

#     Copyright 2015 Wavefront Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
#    limitations under the License.
#

require 'pathname'
require 'wavefront/client'
require 'wavefront/client/version'
require 'wavefront/cli'
require 'docopt'
require 'socket'
include Wavefront::Constants

def sanitize_keys(hash)
  hash.each_with_object({}) do |(k, v), aggr|
    aggr[k.delete('-').to_sym] = v
  end
end

ME = Pathname.new(__FILE__).basename

# If we are a normal user, look for wavefront config in our home
# directory; if not, look in /etc
#
DEF_CF = if ENV['HOME']
           Pathname.new(ENV['HOME']) + '.wavefront'
         else
           Pathname.new('/etc/wavefront/client.conf')
         end

# The global_opts are available in every command.
#
global_opts = %(
Global options:
  -c, --config=FILE    path to configuration file [default: #{DEF_CF}]
  -P, --profile=NAME   profile in configuration file [default: default]
  -D, --debug          enable debug mode
  -h, --help           show this message
)

# The following hash contains the docopt strings defining all the
# commands we offer. They must include the global_opts.
#
usage = {
ts: %(
Usage:
  #{ME} ts [-c file] [-P profile] [-E endpoint] [-t token] [-OD]
            [-S | -m | -H | -d] [-s time] [-e time] [-f format] [-p num]
            [-X bool] <query>
#{global_opts}
Options:
  -E, --endpoint=URI            cluster endpoint [default: #{DEFAULT_HOST}]
  -t, --token=TOKEN             Wavefront authentication token
  -S, --seconds                 query granularity of seconds
  -m, --minutes                 query granularity of minutes
  -H, --hours                   query granularity of hours
  -d, --days                    query granularity of days
  -s, --start=TIME              start of query window in epoch seconds or
                                strptime parseable format
  -e, --end=TIME                end of query window in epoch seconds or
                                strptime parseable format
  -f, --format=STRING           output format (#{FORMATS.join(', ')})
                                [default: #{DEFAULT_FORMAT}]
  -p, --prefixlength=NUM        number of path elements to treat as prefix
                                in schema manipulation. [default: #{DEFAULT_PREFIX_LENGTH}]
  -X, --strict=BOOL             Do not return points outside the query
                                window. [default: #{DEFAULT_STRICT}]
  -O, --includeObsoleteMetrics  include metrics unreported for > 4 weeks
),

alerts: %(
Usage:
  #{ME} alerts [-c file] [-P profile] [-E endpoint] [-t token]
            [-f format] [-p tag] [ -s tag] <state>
#{global_opts}
Options:
  -E, --endpoint=URI   cluster endpoint [default: #{DEFAULT_HOST}]
  -t, --token=TOKEN    Wavefront authentication token
  -f, --format=STRING  output format (#{ALERT_FORMATS.join(', ')})
                       [default: #{DEFAULT_ALERT_FORMAT}]
  -p, --private=TAG    retrieve only alerts with named private tags,
                       comma delimited.
  -s, --shared=TAG     retrieve only alerts with named shared tags, comma
                       delimited.
),

event: %(
Usage:
  #{ME} event create [-V] [-c file] [-P profile] [-E endpoint] [-t token]
           [-d description] [-s time] [-i | -e time] [-l level] [-T type]
           [-H host] [-n] <event>
  #{ME} event close [-V] [-c file] [-P profile] [-E endpoint] [-t token]
           [<event>] [<timestamp>]
  #{ME} event delete [-V] <timestamp> <event>
  #{ME} event show
  #{ME} event --help
#{global_opts}
Options:
  -i, --instant        create an instantaneous event
  -V, --verbose        be verbose
  -s, --start=TIME     time at which event begins
  -e, --end=TIME       time at which event ends
  -l, --level=LEVEL    level of event (#{EVENT_LEVELS.join(', ')})
  -T, --type=TYPE      type of event
  -d, --desc=STRING    description of event
  -H, --host=STRING    list of hosts to tag with even (comma separated)
  -n, --nostate        do not create a local file recording the event

View events in detail using the 'ts' command with the 'events()' function.
),

write: %(
Usage:
  #{ME} write point [-DV] [-c file] [-P profile] [-E proxy] [-t time]
           [-p port] [-H host] [-n] [-T tag...] <metric> <value>
  #{ME} write file [-DV] [-c file] [-P profile] [-E proxy] [-H host]
           [-p port] [-n] [-F format] [-m metric] [-T tag...] <file>
  #{ME} write --help
#{global_opts}
Options:
  -E, --proxy=URI      proxy endpoint [default: #{DEFAULT_PROXY}]
  -t, --time=TIME      time of data point (omit to use current time)
  -H, --host=STRING    source host [default: #{Socket.gethostname}]
  -p, --port=INT       Wavefront proxy port [default: #{DEFAULT_PROXY_PORT}]
  -T, --tag=TAG        point tag in key=value form
  -F, --format=STRING  format of input file or stdin [default: #{DEFAULT_INFILE_FORMAT}]
  -n, --noop           show the metric without sending it
  -m, --metric=STRING  the metric path to which contents of a file will be
                       assigned. If the file contains a metric name, the two
                       will be concatenated
  -V, --verbose        be verbose

Files are whitespace separated, and fields can be defined with the -F
option.  Use 't' for timestamp; 'm' for metric name; 'v' for value
and 'T' for tags. Put 'T' last.
),
source: %(
Usage:
  #{ME} source list [-c file] [-P profile] [-E endpoint] [-t token]
           [-f format] [-T tag ...] [-at] [-s source] [-l limit] <pattern>
  #{ME} source show [-c file] [-P profile] [-E endpoint] [-t token]
           [-f format] <host> ...
  #{ME} source describe [-c file] [-P profile] [-E endpoint] [-t token]
           [-H host ... ] <description>
  #{ME} source undescribe [-c file] [-P profile] [-E endpoint] [-t token]
           [<host>] ...
  #{ME} source tag add [-c file] [-P profile] [-E endpoint] [-t token]
           [-H host ... ] <tag> ...
  #{ME} source tag delete [-c file] [-P profile] [-E endpoint] [-t token]
           [-H host ... ] <tag> ...
  #{ME} source untag [-c file] [-P profile] [-E endpoint] [-t token]
           [<host>] ...
  #{ME} source --help
#{global_opts}
Options:
  -a, --all            including hidden sources in 'human' output
  -t, --tags           show tag counts in 'human' output
  -T, --tagged=STRING  only list sources with this tag in 'human' output
  -s, --start=STRING   start the list after the named source
  -l, --limit=NUMBER   only list NUMBER sources
  -H, --host=STRING    source to manipulate
  -f, --format=STRING  output format (#{ALERT_FORMATS.join(', ')})
                       [default: #{DEFAULT_ALERT_FORMAT}]
),
default: %(
Wavefront CLI

Usage:
  #{ME} [options] command [options]
  #{ME} --version
  #{ME} --help

Commands:
  ts          view timeseries data
  alerts      view alerts
  event       open and close events
  source      view and manage source tags and descriptions
  write       send data points to a Wavefront proxy

Use '#{ME} <command> --help' for further information.)
}

# Parse the input. We have to do this twice because of the nested
# help/option parser generation.
#
begin
  opts = Docopt.docopt(usage[:default], version: Wavefront::Client::VERSION)
rescue Docopt::Exit => e
  cmd = ARGV.length > 0 ? ARGV.first.to_sym : nil

  if usage.keys.include?(cmd)
    begin
      opts = sanitize_keys(Docopt.docopt(usage[cmd]))
    rescue Docopt::Exit => e
      abort e.message
    end
  else
    abort e.message
  end
end

# Load the config file. Values in there take priority, otherwise
# default (unset) options will win.
#
opts.merge!(Wavefront::Cli.new(opts, nil).load_profile || {})

case cmd
when :ts
  require 'wavefront/cli/ts'
  cli = Wavefront::Cli::Ts.new(opts, [opts[:'<query>']])
when :event
  require 'wavefront/cli/events'
  cli = Wavefront::Cli::Events.new(opts, [opts[:'<query>']])
when :alerts
  require 'wavefront/cli/alerts'
  cli = Wavefront::Cli::Alerts.new(opts, [opts[:'<state>']])
when :source
  require 'wavefront/cli/sources'
  cli = Wavefront::Cli::Sources.new(opts, [opts[:'<state>']])
when :write
  if opts[:file]
    require 'wavefront/cli/batch_write'
    cli = Wavefront::Cli::BatchWrite.new(opts, [opts[:'<state>']])
  else
    require 'wavefront/cli/write'
    cli = Wavefront::Cli::Write.new(opts, [opts[:'<state>']])
  end
end

begin
  cli.run
rescue => e
  abort "#{cmd} query failed. #{e}"
end
